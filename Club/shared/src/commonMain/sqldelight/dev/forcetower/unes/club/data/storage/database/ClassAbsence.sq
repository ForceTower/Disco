CREATE TABLE IF NOT EXISTS `ClassAbsence` (
    `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    `classId` INTEGER NOT NULL,
    `profileId` INTEGER NOT NULL,
    `sequence` INTEGER NOT NULL,
    `description` TEXT NOT NULL,
    `date` TEXT NOT NULL,
    `grouping` TEXT NOT NULL,
    `uuid` TEXT NOT NULL,
    `notified` INTEGER NOT NULL,
    FOREIGN KEY(`classId`) REFERENCES `Class`(`id`) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(`profileId`) REFERENCES `Profile`(`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS `index_ClassAbsence_profile_id` ON `ClassAbsence` (`profileId`);
CREATE INDEX IF NOT EXISTS `index_ClassAbsence_class_id` ON `ClassAbsence` (`classId`);
CREATE UNIQUE INDEX IF NOT EXISTS `index_ClassAbsence_class_id_profile_id_sequence_grouping` ON `ClassAbsence` (`classId`, `profileId`, `sequence`, `grouping`);

lastInsertedRow:
SELECT last_insert_rowid();

insertIgnore:
INSERT OR IGNORE INTO `ClassAbsence` (`id`,`classId`,`profileId`,`sequence`,`description`,`date`,`grouping`,`uuid`,`notified`) VALUES (nullif(?, 0),?,?,?,?,?,?,?,?);

selectAll:
SELECT * FROM ClassAbsence;

selectClassCount:
SELECT COUNT(id) FROM ClassAbsence WHERE classId = :classId;

selectFromClass:
SELECT * FROM ClassAbsence WHERE classId = :classId;

selectFromGroup:
SELECT ca.* FROM ClassAbsence ca INNER JOIN ClassGroup cg ON cg.classId == ca.classId WHERE cg.id = :groupId ORDER BY ca.sequence;

resetAbsenceForClass:
DELETE FROM ClassAbsence WHERE classId = :classId;

markAllNotified:
UPDATE ClassAbsence SET notified = 1;